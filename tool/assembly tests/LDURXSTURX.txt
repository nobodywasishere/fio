ADDI   X19,  XZR, 255
ADDI   X20,  XZR, 238
ADDI   X21,  XZR, 221
ADDI   X22,  XZR, 204
STURB  X19, [XZR,  0]
STURB  X20, [XZR,  1]
STUR   X21, [XZR,  3]
STUR   X22, [XZR,  7]
LDURB  X9,  [XZR,  0]
LDURB  X10, [XZR,  1]
LDURB  X11, [XZR,  3]
LDUR   X12, [XZR,  7]
SUB    X9,   X19,  X9
SUB    X10,  X20,  X10
SUB    X11,  X21,  X11
SUB    X12,  X22,  X12
CBNZ   X9,   5
CBNZ   X10,  4
CBNZ   X11,  3
CBNZ   X12,  2
B 0 //succ condition
B 0 //fail condition


module rom_case(out, address);
output reg [31:0] out;
input  [15:0] address; // address- 16 deep memory  
always @(address) begin
case (address)
16'h0000:  out = 32'b10010001000000111111111111110011; // ADDI   X19,  XZR, 255
16'h0001:  out = 32'b10010001000000111011101111110100; // ADDI   X20,  XZR, 238
16'h0002:  out = 32'b10010001000000110111011111110101; // ADDI   X21,  XZR, 221
16'h0003:  out = 32'b10010001000000110011001111110110; // ADDI   X22,  XZR, 204
16'h0004:  out = 32'b00111000000000000000001111110011; // STURB  X19, [XZR,  0]
16'h0005:  out = 32'b00111000000000000001001111110100; // STURB  X20, [XZR,  1]
16'h0006:  out = 32'b11111000000000000011001111110101; // STUR   X21, [XZR,  3]
16'h0007:  out = 32'b11111000000000000111001111110110; // STUR   X22, [XZR,  7]
16'h0008:  out = 32'b00111000010000000000001111101001; // LDURB  X9,  [XZR,  0]
16'h0009:  out = 32'b00111000010000000001001111101010; // LDURB  X10, [XZR,  1]
16'h000a:  out = 32'b00111000010000000011001111101011; // LDURB  X11, [XZR,  3]
16'h000b:  out = 32'b11111000010000000111001111101100; // LDUR   X12, [XZR,  7]
16'h000c:  out = 32'b11001011000010010000001001101001; // SUB    X9,   X19,  X9
16'h000d:  out = 32'b11001011000010100000001010001010; // SUB    X10,  X20,  X10
16'h000e:  out = 32'b11001011000010110000001010101011; // SUB    X11,  X21,  X11
16'h000f:  out = 32'b11001011000011000000001011001100; // SUB    X12,  X22,  X12
16'h0010:  out = 32'b10110101000000000000000010101001; // CBNZ   X9,   5
16'h0011:  out = 32'b10110101000000000000000010001010; // CBNZ   X10,  4
16'h0012:  out = 32'b10110101000000000000000001101011; // CBNZ   X11,  3
16'h0013:  out = 32'b10110101000000000000000001001100; // CBNZ   X12,  2
16'h0014:  out = 32'b00010100000000000000000000000000; // B 0 //succ condition
16'h0015:  out = 32'b00010100000000000000000000000000; // B 0 //fail condition
default: out=32'hD60003E0; //BR XZR
endcase
end
endmodule